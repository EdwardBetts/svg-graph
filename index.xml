<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article>
  <title>SVG::Graph</title>

  <subtitle>@ANT_VERSION@</subtitle>

  <articleinfo>
    <date>@ANT_DATE@</date>

    <author>
      <firstname>Sean</firstname>

      <surname>Russell</surname>

      <email>serATgermaneHYPHENsoftwareDOTcom</email>
    </author>

    <revhistory>
      <revision>
        <revnumber>0.1.0</revnumber>

        <date>+2004/100</date>
      </revision>
    </revhistory>
  </articleinfo>

  <sect1>
    <title>What is it?</title>

    <para>SVG::Graph is a loose port of the Perl SVG::TT:Graph package. It is
    a toolkit for generating SVG data graphs, which are a species of plot that
    are oriented toward displaying statistical data.</para>

    <para>Actually, I just made all of that up. Graphs are a specialization of
    plots in which the data points on one axis are not scalar. That is, the
    columns tend to be names rather than numbers, and if they
    <emphasis>are</emphasis> numbers, the screen representation doesn't insert
    missing data points on that axis. That is, if you only have data for 1, 2,
    and 5, then you'll only get three points, and 5 won't be displayed further
    away from 2 than 2 is from 1.</para>
  </sect1>

  <sect1>
    <title>Screenshot</title>

    <para>Gotta have one.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/pie.svg" format="SVG" />
      </imageobject>
    </mediaobject>

    <para>The SVG output by SVG::Graph uses CSS for styling, and a depressing
    number of SVG viewers don't do CSS correctly yet. If the above image is
    entirely black, your SVG viewer doesn't handle CSS properly. If the above
    image doesn't display at all, your browser probably doesn't understand
    SVG. The Adobe plugin does, as does Batik. In any case, here's a PNG
    version of the above image for the SVG-challenged:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/pie.png" format="PNG" />
      </imageobject>
    </mediaobject>

    <para>The SVG version is <emphasis>much</emphasis> cooler. <ulink
    url="screenshots.html">More screenshots are available</ulink>.</para>
  </sect1>

  <sect1>
    <title>Why use it?</title>

    <para>If you're a Ruby programmer, you can't use SVG::TT::Graph directly.
    This package is for you.</para>

    <para>If you want one of the features that this package has that the Perl
    version doesn't, and you don't mind doing your graph code in Ruby, then
    this package is for you.</para>

    <para>If you're a Perl wienie or you have something against Ruby, use
    SVG::TT::Graph. If it doesn't provide you with the features you want, hack
    it yourself.</para>
  </sect1>

  <sect1>
    <title>Getting it</title>

    <para>The source archives contain the example script(s) and an install
    script. Documentation must be downloaded separately.<itemizedlist>
        <listitem>
          <para><ulink
          url="http://www.germane-software.com/archives/svg_graph_@ANT_VERSION@.tgz">Gzipped
          sources</ulink></para>
        </listitem>

        <listitem>
          <para><ulink
          url="http://www.germane-software.com/archives/svg_graph_api_@ANT_VERSION@.tgz">Gzipped
          documentation</ulink></para>
        </listitem>

        <listitem>
          <para><ulink
          url="http://www.germane-software.com/archives/svg_graph_@ANT_VERSION@.zip">Zipped
          sources</ulink></para>
        </listitem>

        <listitem>
          <para><ulink
          url="http://www.germane-software.com/archives/svg_graph_api_@ANT_VERSION@.zip">Zipped
          documentation</ulink></para>
        </listitem>
      </itemizedlist></para>
  </sect1>

  <sect1>
    <title>Why?</title>

    <para>The SVG::TT:Graph package is just fine. It lacked a couple of
    features that I wanted, and it was in Perl<footnote>
        <para>Perl is from Hell. The language is bad enough, but working with
        the package system -- CPAN, etc. -- is an excercize in masochism. I'd
        rather chew on glass.</para>
      </footnote>, so I re-implemented it.</para>

    <para>SVG::Graph is not a straight port of SVG::TT::Graph, because the
    Perl version uses templates, and I don't believe that this is a job for
    templates. Templates are great when you have lots of context containing a
    little bit of evaluated code, but the Graph classes are mostly code with a
    little SVG; therefore, it makes more sense (and is a hell of a lot more
    readable) to have the SVG embedded in the code rather than vice versa.
    However, much of the logic was directly cut and paste out of
    SVG::TT::Graph, so at least the first few versions of SVG::Graph borrowed
    heavily from the Perl version.</para>

    <para>In fact i version 0.2.0 I completely refactored the code to make it
    more modularized. As a result, the core Graph class contains most of the
    graph drawing primatives, and the specializations only draw the plot
    itself. This results in many fewer lines of code, and that code is more
    robust.</para>

    <para>I intend SVG::Graph to have more features than SVG::TT::Graph, which
    is the main reason for the re-implementation. One such feature is the
    ability to change the stacking of the data sets. For instance, SVG::Graph
    allows you to place the data bars from multiple data sets on the same
    graph side-by-side, rather than overlapping.</para>

    <para>SVG::Graph is probably incomplete. The currently supported graph
    types are:</para>

    <itemizedlist>
      <listitem>
        <para>Bar</para>
      </listitem>

      <listitem>
        <para>BarHorizontal</para>
      </listitem>

      <listitem>
        <para>Line</para>
      </listitem>

      <listitem>
        <para>Pie</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>Dependancies</title>

    <para>REXML 3.0+, or Ruby 1.8+. If you want to use the SVG compression
    feature, which generates zlib compressed SVGs, you must also have the Ruby
    zlib library installed.</para>
  </sect1>

  <sect1>
    <title>Usage</title>

    <para>There's API documentation available, either <ulink
    url="http://www.germane-software.com/software/SVG/SVG::Graph/doc">online</ulink>
    or for <ulink
    url="http://www.germane-software.com/archive/svg_graph_api_@ANT_VERSION@.tgz">download</ulink>.
    Or, you can use rdoc to generate it yourself. The API documentation is
    pretty comprehensive (Leo Lapworth did a really good job on the docs, and
    I stole most of them), and there's an example application in the main
    directory.</para>
  </sect1>

  <sect1>
    <title>Bugs</title>

    <para>SVG::Graph probably contains bugs. In fact, it is probably mostly
    bugs, held together with some working code around them. In particular,
    SVG::Graph is probably really intolerant of *your* bugs, and is likely
    entirely unhelpful in helping you track down problems. We can only pray
    that this situation improves<footnote>
        <para>Prayer is much more effective when accompanied by sums of cash
        sent to the author.</para>
      </footnote>. Email me, and I'll fix them. If the package ever gets
    popular, I'll set up a bug page<footnote>
        <para>Watch: five years from now, when SVG::Graph is a core Ruby
        package, and it consists of a half million lines of code, and the
        United Nations depends on it for all of it's graphing needs, and the
        Linux kernel itself depends on it for its install process -- this
        documentation will be largely unchanged, and although I'll have long
        since set up a bug page, I won't have changed that paragraph.</para>
      </footnote>.</para>
  </sect1>
</article>